// Package swagger provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package swagger

import (
	"context"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /commentaries/{commentaryId})
	DeleteCommentariesCommentaryId(w http.ResponseWriter, r *http.Request, commentaryId string)

	// (PUT /commentaries/{commentaryId})
	PutCommentariesCommentaryId(w http.ResponseWriter, r *http.Request, commentaryId string)

	// (GET /screens/activities)
	GetScreensActivities(w http.ResponseWriter, r *http.Request, params GetScreensActivitiesParams)

	// (GET /screens/contacts)
	GetScreensContacts(w http.ResponseWriter, r *http.Request, params GetScreensContactsParams)

	// (POST /screens/contacts)
	PostScreensContacts(w http.ResponseWriter, r *http.Request, params PostScreensContactsParams)

	// (POST /screens/expenses)
	PostScreensExpenses(w http.ResponseWriter, r *http.Request, params PostScreensExpensesParams)

	// (DELETE /screens/expenses/{expenseId})
	DeleteScreensExpensesExpenseId(w http.ResponseWriter, r *http.Request, expenseId string, params DeleteScreensExpensesExpenseIdParams)

	// (PUT /screens/expenses/{expenseId})
	PutScreensExpensesExpenseId(w http.ResponseWriter, r *http.Request, expenseId string, params PutScreensExpensesExpenseIdParams)

	// (POST /screens/expenses/{expenseId}/commentary)
	PostScreensExpensesExpenseIdCommentary(w http.ResponseWriter, r *http.Request, expenseId string)

	// (GET /screens/groups)
	GetScreensGroups(w http.ResponseWriter, r *http.Request, params GetScreensGroupsParams)

	// (POST /screens/groups)
	PostScreensGroups(w http.ResponseWriter, r *http.Request, params PostScreensGroupsParams)

	// (GET /screens/groups/{groupId})
	GetScreensGroupsGroupId(w http.ResponseWriter, r *http.Request, groupId string, params GetScreensGroupsGroupIdParams)

	// (POST /screens/login)
	PostScreensLogin(w http.ResponseWriter, r *http.Request)

	// (GET /users)
	GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams)

	// (POST /users)
	PostUsers(w http.ResponseWriter, r *http.Request)

	// (PUT /users/{userId})
	PutUsersUserId(w http.ResponseWriter, r *http.Request, userId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (DELETE /commentaries/{commentaryId})
func (_ Unimplemented) DeleteCommentariesCommentaryId(w http.ResponseWriter, r *http.Request, commentaryId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /commentaries/{commentaryId})
func (_ Unimplemented) PutCommentariesCommentaryId(w http.ResponseWriter, r *http.Request, commentaryId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /screens/activities)
func (_ Unimplemented) GetScreensActivities(w http.ResponseWriter, r *http.Request, params GetScreensActivitiesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /screens/contacts)
func (_ Unimplemented) GetScreensContacts(w http.ResponseWriter, r *http.Request, params GetScreensContactsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /screens/contacts)
func (_ Unimplemented) PostScreensContacts(w http.ResponseWriter, r *http.Request, params PostScreensContactsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /screens/expenses)
func (_ Unimplemented) PostScreensExpenses(w http.ResponseWriter, r *http.Request, params PostScreensExpensesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /screens/expenses/{expenseId})
func (_ Unimplemented) DeleteScreensExpensesExpenseId(w http.ResponseWriter, r *http.Request, expenseId string, params DeleteScreensExpensesExpenseIdParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /screens/expenses/{expenseId})
func (_ Unimplemented) PutScreensExpensesExpenseId(w http.ResponseWriter, r *http.Request, expenseId string, params PutScreensExpensesExpenseIdParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /screens/expenses/{expenseId}/commentary)
func (_ Unimplemented) PostScreensExpensesExpenseIdCommentary(w http.ResponseWriter, r *http.Request, expenseId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /screens/groups)
func (_ Unimplemented) GetScreensGroups(w http.ResponseWriter, r *http.Request, params GetScreensGroupsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /screens/groups)
func (_ Unimplemented) PostScreensGroups(w http.ResponseWriter, r *http.Request, params PostScreensGroupsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /screens/groups/{groupId})
func (_ Unimplemented) GetScreensGroupsGroupId(w http.ResponseWriter, r *http.Request, groupId string, params GetScreensGroupsGroupIdParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /screens/login)
func (_ Unimplemented) PostScreensLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /users)
func (_ Unimplemented) GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /users)
func (_ Unimplemented) PostUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /users/{userId})
func (_ Unimplemented) PutUsersUserId(w http.ResponseWriter, r *http.Request, userId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteCommentariesCommentaryId operation middleware
func (siw *ServerInterfaceWrapper) DeleteCommentariesCommentaryId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "commentaryId" -------------
	var commentaryId string

	err = runtime.BindStyledParameterWithOptions("simple", "commentaryId", chi.URLParam(r, "commentaryId"), &commentaryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "commentaryId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCommentariesCommentaryId(w, r, commentaryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutCommentariesCommentaryId operation middleware
func (siw *ServerInterfaceWrapper) PutCommentariesCommentaryId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "commentaryId" -------------
	var commentaryId string

	err = runtime.BindStyledParameterWithOptions("simple", "commentaryId", chi.URLParam(r, "commentaryId"), &commentaryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "commentaryId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutCommentariesCommentaryId(w, r, commentaryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetScreensActivities operation middleware
func (siw *ServerInterfaceWrapper) GetScreensActivities(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScreensActivitiesParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "userId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("userId")]; found {
		var UserId UserIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "userId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "userId", valueList[0], &UserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
			return
		}

		params.UserId = UserId

	} else {
		err := fmt.Errorf("Header parameter userId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetScreensActivities(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetScreensContacts operation middleware
func (siw *ServerInterfaceWrapper) GetScreensContacts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScreensContactsParams

	headers := r.Header

	// ------------- Required header parameter "userId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("userId")]; found {
		var UserId UserIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "userId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "userId", valueList[0], &UserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
			return
		}

		params.UserId = UserId

	} else {
		err := fmt.Errorf("Header parameter userId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "userId", Err: err})
		return
	}

	// ------------- Required header parameter "access-code" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("access-code")]; found {
		var AccessCode string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "access-code", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "access-code", valueList[0], &AccessCode, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "access-code", Err: err})
			return
		}

		params.AccessCode = AccessCode

	} else {
		err := fmt.Errorf("Header parameter access-code is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "access-code", Err: err})
		return
	}

	// ------------- Required header parameter "refresh-token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("refresh-token")]; found {
		var RefreshToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "refresh-token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "refresh-token", valueList[0], &RefreshToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "refresh-token", Err: err})
			return
		}

		params.RefreshToken = RefreshToken

	} else {
		err := fmt.Errorf("Header parameter refresh-token is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "refresh-token", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetScreensContacts(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostScreensContacts operation middleware
func (siw *ServerInterfaceWrapper) PostScreensContacts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostScreensContactsParams

	headers := r.Header

	// ------------- Required header parameter "userId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("userId")]; found {
		var UserId UserIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "userId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "userId", valueList[0], &UserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
			return
		}

		params.UserId = UserId

	} else {
		err := fmt.Errorf("Header parameter userId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "userId", Err: err})
		return
	}

	// ------------- Required header parameter "access-code" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("access-code")]; found {
		var AccessCode string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "access-code", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "access-code", valueList[0], &AccessCode, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "access-code", Err: err})
			return
		}

		params.AccessCode = AccessCode

	} else {
		err := fmt.Errorf("Header parameter access-code is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "access-code", Err: err})
		return
	}

	// ------------- Required header parameter "refresh-token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("refresh-token")]; found {
		var RefreshToken string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "refresh-token", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "refresh-token", valueList[0], &RefreshToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "refresh-token", Err: err})
			return
		}

		params.RefreshToken = RefreshToken

	} else {
		err := fmt.Errorf("Header parameter refresh-token is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "refresh-token", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostScreensContacts(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostScreensExpenses operation middleware
func (siw *ServerInterfaceWrapper) PostScreensExpenses(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostScreensExpensesParams

	headers := r.Header

	// ------------- Required header parameter "userId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("userId")]; found {
		var UserId UserIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "userId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "userId", valueList[0], &UserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
			return
		}

		params.UserId = UserId

	} else {
		err := fmt.Errorf("Header parameter userId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostScreensExpenses(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteScreensExpensesExpenseId operation middleware
func (siw *ServerInterfaceWrapper) DeleteScreensExpensesExpenseId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "expenseId" -------------
	var expenseId string

	err = runtime.BindStyledParameterWithOptions("simple", "expenseId", chi.URLParam(r, "expenseId"), &expenseId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expenseId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteScreensExpensesExpenseIdParams

	headers := r.Header

	// ------------- Required header parameter "userId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("userId")]; found {
		var UserId UserIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "userId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "userId", valueList[0], &UserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
			return
		}

		params.UserId = UserId

	} else {
		err := fmt.Errorf("Header parameter userId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteScreensExpensesExpenseId(w, r, expenseId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutScreensExpensesExpenseId operation middleware
func (siw *ServerInterfaceWrapper) PutScreensExpensesExpenseId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "expenseId" -------------
	var expenseId string

	err = runtime.BindStyledParameterWithOptions("simple", "expenseId", chi.URLParam(r, "expenseId"), &expenseId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expenseId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutScreensExpensesExpenseIdParams

	headers := r.Header

	// ------------- Required header parameter "userId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("userId")]; found {
		var UserId UserIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "userId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "userId", valueList[0], &UserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
			return
		}

		params.UserId = UserId

	} else {
		err := fmt.Errorf("Header parameter userId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutScreensExpensesExpenseId(w, r, expenseId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostScreensExpensesExpenseIdCommentary operation middleware
func (siw *ServerInterfaceWrapper) PostScreensExpensesExpenseIdCommentary(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "expenseId" -------------
	var expenseId string

	err = runtime.BindStyledParameterWithOptions("simple", "expenseId", chi.URLParam(r, "expenseId"), &expenseId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "expenseId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostScreensExpensesExpenseIdCommentary(w, r, expenseId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetScreensGroups operation middleware
func (siw *ServerInterfaceWrapper) GetScreensGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScreensGroupsParams

	headers := r.Header

	// ------------- Required header parameter "userId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("userId")]; found {
		var UserId UserIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "userId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "userId", valueList[0], &UserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
			return
		}

		params.UserId = UserId

	} else {
		err := fmt.Errorf("Header parameter userId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetScreensGroups(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostScreensGroups operation middleware
func (siw *ServerInterfaceWrapper) PostScreensGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostScreensGroupsParams

	headers := r.Header

	// ------------- Required header parameter "userId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("userId")]; found {
		var UserId UserIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "userId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "userId", valueList[0], &UserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
			return
		}

		params.UserId = UserId

	} else {
		err := fmt.Errorf("Header parameter userId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostScreensGroups(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetScreensGroupsGroupId operation middleware
func (siw *ServerInterfaceWrapper) GetScreensGroupsGroupId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", chi.URLParam(r, "groupId"), &groupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScreensGroupsGroupIdParams

	// ------------- Required query parameter "page" -------------

	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "page"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	headers := r.Header

	// ------------- Required header parameter "userId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("userId")]; found {
		var UserId UserIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "userId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "userId", valueList[0], &UserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
			return
		}

		params.UserId = UserId

	} else {
		err := fmt.Errorf("Header parameter userId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetScreensGroupsGroupId(w, r, groupId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostScreensLogin operation middleware
func (siw *ServerInterfaceWrapper) PostScreensLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostScreensLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "userId" -------------

	err = runtime.BindQueryParameter("form", true, false, "userId", r.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", r.URL.Query(), &params.Email)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) PutUsersUserId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutUsersUserId(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/commentaries/{commentaryId}", wrapper.DeleteCommentariesCommentaryId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/commentaries/{commentaryId}", wrapper.PutCommentariesCommentaryId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/screens/activities", wrapper.GetScreensActivities)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/screens/contacts", wrapper.GetScreensContacts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/screens/contacts", wrapper.PostScreensContacts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/screens/expenses", wrapper.PostScreensExpenses)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/screens/expenses/{expenseId}", wrapper.DeleteScreensExpensesExpenseId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/screens/expenses/{expenseId}", wrapper.PutScreensExpensesExpenseId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/screens/expenses/{expenseId}/commentary", wrapper.PostScreensExpensesExpenseIdCommentary)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/screens/groups", wrapper.GetScreensGroups)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/screens/groups", wrapper.PostScreensGroups)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/screens/groups/{groupId}", wrapper.GetScreensGroupsGroupId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/screens/login", wrapper.PostScreensLogin)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.GetUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.PostUsers)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/users/{userId}", wrapper.PutUsersUserId)
	})

	return r
}
