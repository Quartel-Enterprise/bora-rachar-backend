generator client {
    provider = "prisma-client-js"
    previewFeatures = ["views"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id                  String      @id @default(uuid()) @db.Char(36)
    userId              String      @db.Char(36) @map("user_id")
    name                String      @db.VarChar(255) @map("name")
    avatar              String      @db.VarChar(255) @map("avatar") @default("")
    email               String      @db.VarChar(255) @map("email")
    pixKey              String      @db.VarChar(255) @map("pix_key") @default("")
    createdAt           DateTime    @default(now()) @map("created_at") @db.DateTime(0)
    updatedAt           DateTime    @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
    deletedAt           DateTime?   @map("deleted_at") @db.DateTime(0)

    groups              Group[]
    expenses            Expense[]
    groupParticipants   GroupParticipant[]
    groupSolicitations  GroupSolicitation[]
    expensePaymentSplit ExpensePaymentSplit[]
    expenseCommentary   ExpenseCommentary[]

    @@map("user")
}

model Group {
    id                  String      @id @default(uuid()) @db.Char(36)
    name                String      @db.VarChar(255) @map("name")
    avatar              String      @db.VarChar(255) @map("avatar") @default("")
    accessCode          String      @db.VarChar(255) @map("access_code") @default("")
    createdBy           String      @db.Char(36) @map("created_by")
    createdAt           DateTime    @default(now()) @map("created_at") @db.DateTime(0)
    updatedAt           DateTime    @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
    deletedAt           DateTime?   @map("deleted_at") @db.DateTime(0)

    user                User        @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
    expenses            Expense[]
    groupParticipants   GroupParticipant[]
    groupSolicitations  GroupSolicitation[]
    
    @@map("group")
}

model Expense {
    id                  String      @id @default(uuid()) @db.Char(36)
    groupId             String      @db.Char(36) @map("group_id")
    title               String      @db.VarChar(255) @map("title")
    description         String      @db.VarChar(255) @map("description") @default("")
    category            String      @db.VarChar(255) @map("category") @default("")
    avatar              String      @db.VarChar(255) @map("avatar") @default("")
    value               Decimal     @default(0.00) @db.Decimal(12, 2)
    expenseDate         DateTime    @default(now()) @map("expense_date") @db.DateTime(0)
    createdBy           String      @db.Char(36) @map("created_by")
    
    createdAt           DateTime    @default(now()) @map("created_at") @db.DateTime(0)
    updatedAt           DateTime    @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
    deletedAt           DateTime?   @map("deleted_at") @db.DateTime(0)

    user                User        @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
    group               Group       @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    expensePaymentSplit ExpensePaymentSplit[]
    expenseCommentary   ExpenseCommentary[]

    @@map("expense")
}

model GroupParticipant {
    id              String      @id @default(uuid()) @db.Char(36)
    userId          String      @db.Char(36) @map("user_id")
    groupId         String      @db.Char(36) @map("group_id")
    isAdmin         Boolean     @default(false) @map("is_admin")
    admissionDate   DateTime    @default(now()) @map("admission_date") @db.DateTime(0)
    removedAt       DateTime?   @map("removed_at") @db.DateTime(0)
    createdAt       DateTime    @default(now()) @map("created_at") @db.DateTime(0)
    updatedAt       DateTime    @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
    deletedAt       DateTime?   @map("deleted_at") @db.DateTime(0)

    group       Group       @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    user        User        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@map("group_participant")
}

model GroupSolicitation {
    id          String      @id @default(uuid()) @db.Char(36)
    userId      String      @db.Char(36) @map("user_id")
    groupId     String      @db.Char(36) @map("group_id")
    createdAt   DateTime    @default(now()) @map("created_at") @db.DateTime(0)
    updatedAt   DateTime    @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
    deletedAt   DateTime?   @map("deleted_at") @db.DateTime(0)

    group       Group       @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    user        User        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@map("group_solicitation")
}

model ExpensePaymentSplit {
    id              String              @id @default(uuid()) @db.Char(36)
    userId          String              @db.Char(36) @map("user_id")
    expenseId       String              @db.Char(36) @map("expense_id")
    value           Decimal             @default(0.00) @db.Decimal(12, 2)
    transactionType TransactionType     @map("transaction_type")
    isDebtSettled   Boolean             @default(false) @map("is_debt_settled")
    createdAt       DateTime            @default(now()) @map("created_at") @db.DateTime(0)
    updatedAt       DateTime            @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
    deletedAt       DateTime?           @map("deleted_at") @db.DateTime(0)

    expense     Expense                 @relation(fields: [expenseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    user        User                    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@map("expense_payment_split")
}

model ExpenseCommentary {
    id          String      @id @default(uuid()) @db.Char(36)
    userId      String      @db.Char(36) @map("user_id")
    expenseId   String      @db.Char(36) @map("expense_id")
    commentary  String      @db.VarChar(255) @map("commentary") @default("")
    createdAt   DateTime    @default(now()) @map("created_at") @db.DateTime(0)
    updatedAt   DateTime    @default(now()) @updatedAt @map("updated_at") @db.DateTime(0)
    deletedAt   DateTime?   @map("deleted_at") @db.DateTime(0)

    expense     Expense     @relation(fields: [expenseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    user        User        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    @@map("expense_commentary")

}

enum TransactionType {
    P
    B
}